#ifndef INSTRUCTION_TABLE_H
#define INSTRUCTION_TABLE_H

#include "decode.h"

struct Prefix prefix_table[] = {
    PREFIX(PREFIX_ID_NONE, none, 0),
    PREFIX(PREFIX_ID_REP, rep, 11110011),
    PREFIX(PREFIX_ID_REPNE, repne, 11110010),
    PREFIX(PREFIX_ID_LOCK, lock, 11110000),
    PREFIX(PREFIX_ID_SEGMENT_ES, es:, 00100110),
    PREFIX(PREFIX_ID_SEGMENT_CS, cs:, 00101110),
    PREFIX(PREFIX_ID_SEGMENT_SS, ss:, 00110110),
    PREFIX(PREFIX_ID_SEGMENT_DS, ds:, 00111110),
};

struct Instruction instruction_table[] = {
    INST(MOV, mov, {OPCODE1(100010), D, W, MOD, REG, RM, END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(MOV, mov, {OPCODE1(1100011), W, MOD, OPCODE2(000), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_IMMEDIATE}),
    INST(MOV, mov, {OPCODE1(1011), W, REG, END}, {OPERAND_ID_REG}, {OPERAND_ID_IMMEDIATE}),
    INST(MOV, mov, {OPCODE1(1010000), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_ADDRESS}),
    INST(MOV, mov, {OPCODE1(1010001), W, END}, {OPERAND_ID_ADDRESS}, {OPERAND_ID_ACCUMULATOR}),
    INST(MOV, mov, {OPCODE1(10001110), MOD, OPCODE2(0), SR, RM, ImplW(1), END}, {OPERAND_ID_SR}, {OPERAND_ID_RM}),
    INST(MOV, mov, {OPCODE1(10001100), MOD, OPCODE2(0), SR, RM, ImplW(1),END}, {OPERAND_ID_RM}, {OPERAND_ID_SR}),

    INST(PUSH, push, {OPCODE1(11111111), MOD, OPCODE2(110), RM, ImplW(1), END}, {OPERAND_ID_NONE}, {OPERAND_ID_RM}),
    INST(PUSH, push, {OPCODE1(01010), REG, ImplW(1), END}, {OPERAND_ID_NONE}, {OPERAND_ID_REG}),
    INST(PUSH, push, {OPCODE1(000), SR, OPCODE2(110), ImplW(1), END}, {OPERAND_ID_NONE}, {OPERAND_ID_SR}),

    INST(POP, pop, {OPCODE1(10001111), MOD, OPCODE2(000), RM, ImplW(1), END}, {OPERAND_ID_NONE}, {OPERAND_ID_RM}),
    INST(POP, pop, {OPCODE1(01011), REG, ImplW(1), END}, {OPERAND_ID_NONE}, {OPERAND_ID_REG}),
    INST(POP, pop, {OPCODE1(000), SR, OPCODE2(111), ImplW(1), END}, {OPERAND_ID_NONE}, {OPERAND_ID_SR}),

    INST(XCHG, xchg, {OPCODE1(1000011), W, MOD, REG, RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_REG}),
    INST(XCHG, xchg, {OPCODE1(10010), REG, ImplW(1), END}, {OPERAND_ID_REG}, {OPERAND_ID_ACCUMULATOR}),

    INST(IN, in, {OPCODE1(1110010), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_DATA8}),
    INST(IN, in, {OPCODE1(1110110), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_DX}),

    INST(OUT, out, {OPCODE1(1110011), W, END}, {OPERAND_ID_DATA8}, {OPERAND_ID_ACCUMULATOR}),
    INST(OUT, out, {OPCODE1(1110111), W, END}, {OPERAND_ID_DX}, {OPERAND_ID_ACCUMULATOR}),

    INST(XLAT, xlat, {OPCODE1(11010111), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(LEA, lea, {OPCODE1(10001101), MOD, REG, RM, ImplW(1), END}, {OPERAND_ID_REG}, {OPERAND_ID_RM}),
    INST(LDS, lds, {OPCODE1(11000101), MOD, REG, RM, ImplW(1), END}, {OPERAND_ID_REG}, {OPERAND_ID_RM}),
    INST(LES, les, {OPCODE1(11000100), MOD, REG, RM, ImplW(1), END}, {OPERAND_ID_REG}, {OPERAND_ID_RM}),
    INST(LAHF, lahf, {OPCODE1(10011111), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(SAHF, sahf, {OPCODE1(10011110), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(PUSHF, pushf, {OPCODE1(10011100), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(POPF, popf, {OPCODE1(10011101), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),

    INST(ADD, add, {OPCODE1(000000), D, W, MOD, REG, RM, END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(ADD, add, {OPCODE1(100000), S, W, MOD, OPCODE2(000), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_IMMEDIATE}),
    INST(ADD, add, {OPCODE1(0000010), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_IMMEDIATE}),

    INST(ADC, adc, {OPCODE1(000100), D, W, MOD, REG, RM, END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(ADC, adc, {OPCODE1(100000), S, W, MOD, OPCODE2(010), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_IMMEDIATE}),
    INST(ADC, adc, {OPCODE1(0001010), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_IMMEDIATE}),

    INST(INC, inc, {OPCODE1(1111111), W, MOD, OPCODE1(000), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_NONE}),
    INST(INC, inc, {OPCODE1(01000), REG, ImplW(1), END}, {OPERAND_ID_REG}, {OPERAND_ID_NONE}),

    INST(AAA, aaa, {OPCODE1(00110111), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(DAA, daa, {OPCODE1(00100111), END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),

    INST(SUB, sub, {OPCODE1(001010), D, W, MOD, REG, RM, END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(SUB, sub, {OPCODE1(100000), S, W, MOD, OPCODE2(101), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_IMMEDIATE}),
    INST(SUB, sub, {OPCODE1(0010110), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_IMMEDIATE}),

    INST(SBB, sbb, {OPCODE1(000110), D, W, MOD, REG, RM, END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(SBB, sbb, {OPCODE1(100000), S, W, MOD, OPCODE2(011), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_IMMEDIATE}),
    INST(SBB, sbb, {OPCODE1(0001110), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_IMMEDIATE}),

    INST(DEC, dec, {OPCODE1(1111111), W, MOD, OPCODE2(001), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_NONE}),
    INST(DEC, dec, {OPCODE1(01001), REG, ImplW(1), END}, {OPERAND_ID_REG}, {OPERAND_ID_NONE}),

    INST(NEG, neg, {OPCODE1(1111011), W, MOD, OPCODE2(011), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_NONE}),

    INST(CMP, cmp, {OPCODE1(001110), D, W, MOD, REG, RM, END}, {OPERAND_ID_NONE}, {OPERAND_ID_NONE}),
    INST(CMP, cmp, {OPCODE1(100000), S, W, MOD, OPCODE2(111), RM, END}, {OPERAND_ID_RM}, {OPERAND_ID_IMMEDIATE}),
    INST(CMP, cmp, {OPCODE1(0011110), W, END}, {OPERAND_ID_ACCUMULATOR}, {OPERAND_ID_IMMEDIATE}),

    INST(JZ, jz, {OPCODE1(01110100), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JL, jl, {OPCODE1(01111100), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JLE, jle, {OPCODE1(01111110), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JB, jb, {OPCODE1(01110010), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JBE, jbe, {OPCODE1(01110110), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JP, jp, {OPCODE1(01111010), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JO, jo, {OPCODE1(01110000), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JS, js, {OPCODE1(01111000), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNE, jne, {OPCODE1(01110101), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNL, jnl, {OPCODE1(01111101), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNLE, jnle, {OPCODE1(01111111), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNB, jnb, {OPCODE1(01110011), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNBE, jnbe, {OPCODE1(01110111), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNP, jnp, {OPCODE1(01111011), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNO, jno, {OPCODE1(01110001), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JNS, jns, {OPCODE1(01111001), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(LOOP, loop, {OPCODE1(11100010), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(LOOPZ, loopz, {OPCODE1(11100001), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(LOOPNZ, loopnz, {OPCODE1(11100000), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
    INST(JCXZ, jcxz, {OPCODE1(11100011), ImplW(0), END}, {OPERAND_ID_IPINC8}, {OPERAND_ID_NONE}),
};

#endif // INSTRUCTION_TABLE_H